---
title: "Blocks presentation"
theme: white
plugins:
  - highlight
---
---

# Blocks

---

## Why?

### Non-feedforward neural networks!

---

## So what does it do?

---

## Modelling

* Help construct Theano computation graph
* Annotate graph
* Easily access and filter variables

---

## Training

* Training progress serialization and resumption
* Per batch and validation set monitoring
* Dataset interfaces with (chained) iterators
* Live plotting

---

## Blocks â‰  Pylearn3

---

## Pylearn2 is a *"machine learning library"*

## Blocks is a *"Theano toolkit"*

---
data-background-color="#fa0", data-background-transition="zoom"

## <i class="fa fa-exclamation-triangle fa-5x"></i>

## Warning: Beta status

---

## In *Blocks* you build with *Bricks*

~~~
class Linear(Initializable, Feedforward):
    ...
    def apply(self, input_):
        W, b = self.params
        output = tensor.dot(input_, W)
        if self.use_bias:
            output += b
        return output

x = tensor.matrix()
linear = Linear(input_dim=100, output_dim=50)
y = linear.apply(x)
~~~
{: .python}

---

## Bricks manage their parameters

~~~
linear.weights_init = IsotropicGaussian(0.01)
linear.initialize()
~~~
{: .python}

---

## Bricks annotate the computation graph

~~~
>>> cg = ComputationGraph(y)
>>> VariableFilter(roles=[PARAMETERS])(cg.variables)
[W, b]
>>> VariableFilter(roles=[WEIGHTS])(cg.variables)
[W]
>>> VariableFilter(roles=[AUXILIARY])(cg.variables)
[W_norm]
~~~
{: .python}
